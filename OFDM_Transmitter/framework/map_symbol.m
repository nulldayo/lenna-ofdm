% #########################################################################
%
% University of Rostock
% Faculty of Informatics and Electrical Engineering
% Institute of Communications Engineering
%
% M.Sc. Andre Angierski
% Version: #VERSION_DUMMY#
%
% #########################################################################
%
% Modulates vector c with with a given 'mapping_scheme' to
% a symbol vector. The symbols are normalised to unit transmit power on 
% average.
%
% function [x, padded_bits, x_bin] = map_symbol(c, mapping_scheme)
%
% INPUTS:
%       c               -   vector of bits to map
%       mapping_scheme  -   mapping structure, generated by
%                           "generate_mapping()"
% OUTPUTS:
%       x               -   mapped symbols (complex representation)
%       padded_bits     -   number of added bits
%       x_bin           -   mapped symbols (binary representation)
%
% EXAMPLES:
%       mapping     = generate_mapping(4, 'QAM');
%       x           = map_symbol([1 1 0 1], mapping)
%
function [x, padded_bits, x_bin] = map_symbol(c, mapping_scheme)

m = mapping_scheme.m;

%zero padding
padded_bits = ceil(numel(c)/mapping_scheme.m)*mapping_scheme.m - numel(c);
if padded_bits > 0
        c = [c, false(1, padded_bits)];
end

% copy alphabet
alphabet_binary = mapping_scheme.alphabet.binary;
alphabet_complex = mapping_scheme.alphabet.complex;

% do mapping
x = alphabet_complex( bi2de_( reshape(c,m,length(c)/m).', 'left-msb') + 1 );

if nargout > 1
    x_bin = alphabet_binary(:,(bi2de_( reshape(c,m,length(c)/m).','left-msb') + 1));
end

end